# Enterprise CI/CD Pipeline for AI Career Mentor Chatbot
# 
# 🚨 RED SQUIGGLES ARE NORMAL! 🚨
# The linter warnings about missing Azure secrets/variables are expected for new repositories.
# These will resolve once you configure Azure deployment (optional).
#
# BASIC USAGE (No Azure Setup Required):
# - Push to any branch → Runs code quality checks and tests
# - The deployment jobs will be skipped automatically if Azure isn't configured
#
# FULL ENTERPRISE SETUP (Optional):
# 1. Repository Variables (Settings > Secrets and variables > Actions > Variables):
#    - AZURE_CONTAINER_REGISTRY: Your ACR name (without .azurecr.io)
#    - AZURE_SUBSCRIPTION_ID: Your Azure subscription ID  
#    - MAINTAINER_EMAIL: Email for notifications
#
# 2. Repository Secrets (Settings > Secrets and variables > Actions > Secrets):
#    - AZURE_CREDENTIALS_DEV/STAGING/PROD: Azure service principals
#
# 3. GitHub Environments (Settings > Environments):
#    - development, staging, production: With protection rules
#
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  # REGISTRY_LOGIN_SERVER: Set this in repository variables as AZURE_CONTAINER_REGISTRY
  IMAGE_NAME: ai-career-mentor
  
jobs:
  # ==========================================
  # Code Quality and Security Analysis
  # ==========================================
  
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pre-commit ruff mypy bandit[toml] safety
    
    - name: Install pre-commit hooks
      run: |
        pre-commit install
    
    - name: Run pre-commit hooks (all files)
      run: |
        pre-commit run --all-files || true
    
    - name: Code linting with Ruff
      run: |
        ruff check src/ --output-format=github
    
    - name: Code formatting check with Ruff
      run: |
        ruff format --check src/
    
    - name: Type checking with MyPy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium || true
    
    - name: Vulnerability scan with Safety
      run: |
        safety check --config .safety-policy.yml || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # ==========================================
  # Unit and Integration Tests
  # ==========================================
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        # Test Environment Configuration
        ENVIRONMENT=test
        LOG_LEVEL=DEBUG
        
        # Azure OpenAI (Mock values for testing)
        AZURE_OPENAI_API_KEY=test-key
        AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com/
        AZURE_OPENAI_API_VERSION=2024-02-15-preview
        AZURE_OPENAI_CHAT_MODEL=gpt-4
        AZURE_OPENAI_EMBEDDING_MODEL=text-embedding-ada-002
        
        # Azure Cognitive Search (Mock values)
        AZURE_SEARCH_SERVICE_ENDPOINT=https://test-search.search.windows.net
        AZURE_SEARCH_API_KEY=test-search-key
        AZURE_SEARCH_INDEX_NAME=test-knowledge-base
        
        # Azure Cosmos DB (Mock values)
        AZURE_COSMOS_ENDPOINT=https://test-cosmos.documents.azure.com:443/
        AZURE_COSMOS_KEY=test-cosmos-key
        AZURE_COSMOS_DATABASE_NAME=test-chatbot
        AZURE_COSMOS_CONTAINER_NAME=test-conversations
        
        # Application Insights (Mock values)
        APPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=test-key
        EOF
    
    - name: Wait for services (if needed)
      run: |
        # Add any service startup wait logic here
        sleep 2
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        python -m pytest tests/unit/ \
          --verbose \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --junitxml=test-results-unit.xml \
          --tb=short
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        python -m pytest tests/integration/ \
          --verbose \
          --tb=short \
          --junitxml=test-results-integration.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results-*.xml
          htmlcov/
        retention-days: 30
    
    - name: Upload coverage reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ==========================================
  # Frontend Build and Test
  # ==========================================
  
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm install
    
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: frontend/build/
        retention-days: 30

  # ==========================================
  # Build and Security Scan Container
  # ==========================================
  
  build:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, test, frontend]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build container image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/container-image.tar
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          BUILD_VERSION=${{ github.sha }}
          BUILD_BRANCH=${{ github.ref_name }}
    
    - name: Upload container image artifact
      uses: actions/upload-artifact@v4
      with:
        name: container-image
        path: /tmp/container-image.tar
        retention-days: 1
    
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
    
    - name: Run Trivy vulnerability scanner
      run: |
        trivy image \
          --format sarif \
          --output trivy-results.sarif \
          --severity HIGH,CRITICAL \
          --input /tmp/container-image.tar
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results.sarif
    
    - name: Run Trivy vulnerability scanner (table format)
      run: |
        trivy image \
          --format table \
          --severity HIGH,CRITICAL \
          --input /tmp/container-image.tar

  # ==========================================
  # Deploy to Development Environment
  # ==========================================
  
  deploy-dev:
    name: Deploy to Development  
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    # Note: Deployment requires Azure credentials and container registry to be configured
    # Set up repository secrets and variables as documented in the header comments
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && vars.AZURE_CONTAINER_REGISTRY != ''
    environment: development  # Create this environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download container image artifact
      uses: actions/download-artifact@v4
      with:
        name: container-image
        path: /tmp
    
    - name: Load container image
      run: docker load --input /tmp/container-image.tar
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      continue-on-error: true
    
    - name: Login to Azure Container Registry
      if: ${{ vars.AZURE_CONTAINER_REGISTRY != '' }}
      run: |
        az acr login --name ${{ vars.AZURE_CONTAINER_REGISTRY }}
    
    - name: Push container image
      run: |
        # Get the image name from the build step
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        docker push $IMAGE_TAG
        echo "Pushed image: $IMAGE_TAG"
    
    - name: Deploy infrastructure
      run: |
        chmod +x ./infrastructure/scripts/deploy.sh
        ./infrastructure/scripts/deploy.sh \
          -e dev \
          -s ${{ vars.AZURE_SUBSCRIPTION_ID }} \
          -m ${{ vars.MAINTAINER_EMAIL }} \
          --auto-approve
    
    - name: Update Container App
      run: |
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        
        az containerapp update \
          --name ai-career-mentor-dev \
          --resource-group rg-ai-career-mentor-dev \
          --image $IMAGE_TAG \
          --revision-suffix $(date +%s)
    
    - name: Run health checks
      run: |
        # Get the Container App URL
        APP_URL=$(az containerapp show \
          --name ai-career-mentor-dev \
          --resource-group rg-ai-career-mentor-dev \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        # Wait for deployment to be ready
        echo "Waiting for deployment to be ready..."
        sleep 30
        
        # Test health endpoint
        curl -f "https://$APP_URL/health" || exit 1
        curl -f "https://$APP_URL/health/ready" || exit 1
        
        echo "✅ Development deployment successful!"
        echo "🌐 Application URL: https://$APP_URL"

  # ==========================================
  # Deploy to Staging Environment
  # ==========================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [deploy-dev]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'staging'
    environment: staging  # Create this environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add staging deployment logic here
        # This would be similar to dev but with staging parameters
    
    - name: Run staging tests
      run: |
        echo "🧪 Running staging validation tests..."
        # Add staging-specific tests here

  # ==========================================
  # Deploy to Production Environment
  # ==========================================
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'prod'
    environment: production  # Create this environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download container image artifact
      uses: actions/download-artifact@v4
      with:
        name: container-image
        path: /tmp
    
    - name: Load container image
      run: docker load --input /tmp/container-image.tar
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ vars.AZURE_CONTAINER_REGISTRY }}
    
    - name: Push container image
      run: |
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        docker push $IMAGE_TAG
        echo "Pushed image: $IMAGE_TAG"
    
    - name: Deploy infrastructure (production)
      run: |
        chmod +x ./infrastructure/scripts/deploy.sh
        ./infrastructure/scripts/deploy.sh \
          -e prod \
          -s ${{ vars.AZURE_SUBSCRIPTION_ID }} \
          -m ${{ vars.MAINTAINER_EMAIL }} \
          --auto-approve
    
    - name: Update Container App (production)
      run: |
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        
        az containerapp update \
          --name ai-career-mentor-prod \
          --resource-group rg-ai-career-mentor-prod \
          --image $IMAGE_TAG \
          --revision-suffix $(date +%s)
    
    - name: Run production health checks
      run: |
        APP_URL=$(az containerapp show \
          --name ai-career-mentor-prod \
          --resource-group rg-ai-career-mentor-prod \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "Waiting for production deployment..."
        sleep 60
        
        # Comprehensive health checks
        curl -f "https://$APP_URL/health" || exit 1
        curl -f "https://$APP_URL/health/ready" || exit 1
        curl -f "https://$APP_URL/health/detailed" || exit 1
        
        echo "🎉 Production deployment successful!"
        echo "🌐 Production URL: https://$APP_URL"
    
    - name: Create deployment tag
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        TAG_NAME="prod-$(date +'%Y%m%d-%H%M%S')"
        git tag -a "$TAG_NAME" -m "Production deployment: ${{ github.sha }}"
        git push origin "$TAG_NAME"
        
        echo "✅ Created deployment tag: $TAG_NAME"

  # ==========================================
  # Notification and Cleanup
  # ==========================================
  
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, deploy-dev]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.test.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" && 
              ("${{ needs.deploy-dev.result }}" == "success" || "${{ needs.deploy-dev.result }}" == "skipped") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ CI/CD Pipeline completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ CI/CD Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi
    
    - name: Output results
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Dev:** ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY